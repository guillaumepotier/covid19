{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","timespanDays","population","dailyContacts","transmissionProbability","illnessDuration","averageMortalityRate","totalAvailableBeds","increasingMortalityRate","data","days","total_healthy","this","total_ill","total_deceased","total_incr_deceased","total_remitted","daily_ill","daily_deceased","daily_remitted","day","ill","Math","round","normalyDeceased","deceased","incrDeceased","remitted","healthy","push","max","fields","chartData","length","item","i","number","String","replace","generateData","chartData1","generateChartData","chartData2","console","log","className","TextField","label","type","value","onChange","e","setState","target","formatHumanReadableNumber","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fillOpacity","fill","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAmLeA,G,mBA5Jb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,aAAc,IACdC,WAAY,KACZC,cAAe,GACfC,wBAAyB,GACzBC,gBAAiB,GACjBC,qBAAsB,EACtBC,mBAAoB,KACpBC,wBAAyB,GAXV,E,4EA4BjB,IAZA,IAAMC,EAAO,CACXC,KAAM,CAAC,GACPC,cAAe,CAACC,KAAKZ,MAAME,WAvBb,KAwBdW,UAAW,CAxBG,KAyBdC,eAAgB,CAvBD,IAwBfC,oBAAqB,CAAC,GACtBC,eAAgB,CA1BG,KA2BnBC,UAAW,CA5BG,KA6BdC,eAAgB,CA3BD,IA4BfC,eAAgB,CAAC,IAGVC,EAAM,EAAGA,GAAOR,KAAKZ,MAAMC,aAAcmB,IAAO,CAEvD,IAAMC,EAAMC,KAAKC,MACfd,EAAKI,UAAUO,EAAI,IACjB,EACER,KAAKZ,MAAMG,cAAgBS,KAAKZ,MAAMI,wBAA0B,IAAMK,EAAKE,cAAcS,EAAI,GAAKR,KAAKZ,MAAME,WAC7G,EAAEU,KAAKZ,MAAMK,gBACbO,KAAKZ,MAAMM,qBAAuB,IAAMM,KAAKZ,MAAMK,kBAInDmB,EAAkBF,KAAKC,MAAMd,EAAKK,eAAeM,EAAI,GAAKR,KAAKZ,MAAMM,qBAAuB,IAAMM,KAAKZ,MAAMK,gBAAkBgB,GAC/HI,EAAWH,KAAKC,MAAMd,EAAKK,eAAeM,EAAI,IAAMC,EAAMT,KAAKZ,MAAMO,mBAAqBK,KAAKZ,MAAMM,qBAAuBM,KAAKZ,MAAMQ,wBAA0BI,KAAKZ,MAAMM,sBAAwB,IAAMM,KAAKZ,MAAMK,gBAAkBgB,GACvOK,EAAejB,EAAKM,oBAAoBK,EAAI,GAAKK,EAAWD,EAE5DG,EAAWL,KAAKC,MAAMd,EAAKO,eAAeI,EAAI,GAAM,EAAIR,KAAKZ,MAAMK,gBAAmBgB,GACtFO,EAAUN,KAAKC,MAAMX,KAAKZ,MAAME,WAAamB,EAAMI,EAAWE,GAEpElB,EAAKC,KAAKmB,KAAKT,GAEfX,EAAKE,cAAckB,KAAKD,GACxBnB,EAAKI,UAAUgB,KAAKR,GACpBZ,EAAKK,eAAee,KAAKJ,GACzBhB,EAAKM,oBAAoBc,KAAKH,GAC9BjB,EAAKO,eAAea,KAAKF,GAEzBlB,EAAKQ,UAAUY,KAAKP,KAAKQ,IAAI,EAAGT,EAAMZ,EAAKI,UAAUO,EAAM,KAC3DX,EAAKS,eAAeW,KAAKP,KAAKQ,IAAI,EAAGL,EAAWhB,EAAKK,eAAeM,EAAM,KAC1EX,EAAKU,eAAeU,KAAKP,KAAKQ,IAAI,EAAGH,EAAWlB,EAAKO,eAAeI,EAAM,KAG5E,OAAOX,I,wCAGUA,EAAMsB,GAGvB,IAFA,IAAMC,EAAY,GAETZ,EAAM,EAAGA,EAAMX,EAAKC,KAAKuB,OAAQb,IAAO,CAG/C,IAFA,IAAMc,EAAO,GAEJC,EAAI,EAAGA,EAAIJ,EAAOE,OAAQE,IACjCD,EAAKH,EAAOI,IAAM1B,EAAKsB,EAAOI,IAAIf,GAEpCY,EAAUH,KAAKK,GAGjB,OAAOF,I,gDAGkBI,GACzB,OAAOC,OAAOD,GAAQE,QAAQ,oBAAoB,S,+BAGzC,IAAD,OACF7B,EAAOG,KAAK2B,eACZC,EAAa5B,KAAK6B,kBAAkBhC,EAAM,CAAC,OAAQ,gBAAiB,YAAa,mBACjFiC,EAAa9B,KAAK6B,kBAAkBhC,EAAM,CAAC,OAAQ,YAAa,iBAAkB,mBAIxF,OAFAkC,QAAQC,IAAInC,GAGV,yBAAKoC,UAAU,OACb,yBAAKA,UAAU,cAEb,kBAACC,EAAA,EAAD,CAAWC,MAAK,6BAAgCC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMC,aAAciD,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEnD,aAAckD,EAAEE,OAAOJ,WACpJ,kBAACH,EAAA,EAAD,CAAWC,MAAK,mBAAsBC,KAAK,SAASC,MAAOrC,KAAKZ,MAAME,WAAYgD,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAElD,WAAYiD,EAAEE,OAAOJ,WACtI,kBAACH,EAAA,EAAD,CAAWC,MAAK,0BAA6BC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMG,cAAe+C,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEjD,cAAegD,EAAEE,OAAOJ,WACnJ,kBAACH,EAAA,EAAD,CAAWC,MAAK,+BAAkCC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMI,wBAAyB8C,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEhD,wBAAyB+C,EAAEE,OAAOJ,WAC5K,kBAACH,EAAA,EAAD,CAAWC,MAAK,0BAA6BC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMK,gBAAiB6C,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAE/C,gBAAiB8C,EAAEE,OAAOJ,WACvJ,kBAACH,EAAA,EAAD,CAAWC,MAAK,6BAAgCC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMM,qBAAsB4C,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAE9C,qBAAsB6C,EAAEE,OAAOJ,WACpK,kBAACH,EAAA,EAAD,CAAWC,MAAK,0BAA6BC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMO,mBAAoB2C,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAE7C,mBAAoB4C,EAAEE,OAAOJ,WAC7J,kBAACH,EAAA,EAAD,CAAWC,MAAK,8BAAiCC,KAAK,SAASC,MAAOrC,KAAKZ,MAAMQ,wBAAyB0C,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAE5C,wBAAyB2C,EAAEE,OAAOJ,YAI7K,yBAAKJ,UAAU,QACb,+CAAqBjC,KAAK0C,0BAA0B7C,EAAKK,eAAeL,EAAKK,eAAemB,OAAS,IAArG,WAAkHrB,KAAK0C,0BAA0B7C,EAAKM,oBAAoBN,EAAKM,oBAAoBkB,OAAS,IAA5M,MAGF,yBAAKY,UAAU,UAEb,kBAAC,IAAD,CAAqBU,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CAAW/C,KAAM+B,EACfiB,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,IAC/C,8BACE,oCAAgBC,GAAG,eAAeC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACxD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,KAEtD,oCAAgBP,GAAG,WAAWC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACpD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,KAEtD,oCAAgBP,GAAG,YAAYC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACrD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAGxD,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMvB,KAAK,WAAWsB,QAAQ,gBAAgBE,OAAO,UAAUC,YAAa,EAAGC,KAAK,uBACpF,kBAAC,IAAD,CAAM1B,KAAK,WAAWsB,QAAQ,YAAYE,OAAO,UAAUC,YAAa,EAAGC,KAAK,mBAChF,kBAAC,IAAD,CAAM1B,KAAK,WAAWsB,QAAQ,iBAAiBE,OAAO,UAAUC,YAAa,EAAGC,KAAK,sBAIzF,kBAAC,IAAD,CAAqBnB,MAAM,OAAOC,OAAQ,KACxC,kBAAC,IAAD,CAAU/C,KAAMiC,GACd,kBAAC,IAAD,CAAe6B,gBAAgB,QAC/B,kBAAC,IAAD,CAAOD,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,YAAYI,KAAK,YAC9B,kBAAC,IAAD,CAAKJ,QAAQ,iBAAiBI,KAAK,YACnC,kBAAC,IAAD,CAAKJ,QAAQ,iBAAiBI,KAAK,oB,GAnJ/BC,IAAMC,YCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.6e5a9f60.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  BarChart,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  linearGradient,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Bar\n} from 'recharts';\n\nimport './App.css';\n\nconst INITIAL_ILL = 2000;\nconst INITIAL_REMITTED = 200;\nconst INITIAL_DEAD = 50;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timespanDays: 180,\n      population: 67000000,\n      dailyContacts: 40,\n      transmissionProbability: 0.5,\n      illnessDuration: 10,\n      averageMortalityRate: 2,\n      totalAvailableBeds: 15000,\n      increasingMortalityRate: 1\n    };\n  }\n\n  generateData () {\n    const data = {\n      days: [0],\n      total_healthy: [this.state.population - INITIAL_ILL],\n      total_ill: [INITIAL_ILL],\n      total_deceased: [INITIAL_DEAD],\n      total_incr_deceased: [0],\n      total_remitted: [INITIAL_REMITTED],\n      daily_ill: [INITIAL_ILL],\n      daily_deceased: [INITIAL_DEAD],\n      daily_remitted: [0]\n    };\n\n    for (let day = 1; day <= this.state.timespanDays; day++) {\n\n      const ill = Math.round(\n        data.total_ill[day-1] * (\n          1\n          + this.state.dailyContacts * this.state.transmissionProbability / 100 * data.total_healthy[day-1] / this.state.population\n          - 1/this.state.illnessDuration\n          - this.state.averageMortalityRate / 100 / this.state.illnessDuration\n        )\n      );\n\n      const normalyDeceased = Math.round(data.total_deceased[day-1] + this.state.averageMortalityRate / 100 / this.state.illnessDuration * ill);\n      const deceased = Math.round(data.total_deceased[day-1] + (ill > this.state.totalAvailableBeds ? this.state.averageMortalityRate + this.state.increasingMortalityRate : this.state.averageMortalityRate) / 100 / this.state.illnessDuration * ill);\n      const incrDeceased = data.total_incr_deceased[day-1] + deceased - normalyDeceased;\n\n      const remitted = Math.round(data.total_remitted[day-1] + (1 / this.state.illnessDuration) * ill);\n      const healthy = Math.round(this.state.population - ill - deceased - remitted);\n\n      data.days.push(day);\n\n      data.total_healthy.push(healthy);\n      data.total_ill.push(ill);\n      data.total_deceased.push(deceased);\n      data.total_incr_deceased.push(incrDeceased);\n      data.total_remitted.push(remitted);\n\n      data.daily_ill.push(Math.max(0, ill - data.total_ill[day - 1]));\n      data.daily_deceased.push(Math.max(0, deceased - data.total_deceased[day - 1]));\n      data.daily_remitted.push(Math.max(0, remitted - data.total_remitted[day - 1]));\n    }\n\n    return data;\n  }\n\n  generateChartData (data, fields) {\n    const chartData = [];\n\n    for (let day = 0; day < data.days.length; day++) {\n      const item = {};\n\n      for (let i = 0; i < fields.length; i++)\n        item[fields[i]] = data[fields[i]][day];\n\n      chartData.push(item);\n    }\n\n    return chartData;\n  }\n\n  formatHumanReadableNumber (number) {\n    return String(number).replace(/(.)(?=(\\d{3})+$)/g,'$1 ');\n  }\n\n  render () {\n    const data = this.generateData();\n    const chartData1 = this.generateChartData(data, ['days', 'total_healthy', 'total_ill', 'total_deceased']);\n    const chartData2 = this.generateChartData(data, ['days', 'daily_ill', 'daily_remitted', 'daily_deceased']);\n\n    console.log(data);\n\n    return (\n      <div className=\"App\">\n        <div className=\"Parameters\">\n\n          <TextField label={`Simulation timespan (days)`} type=\"number\" value={this.state.timespanDays} onChange={e => this.setState({ timespanDays: e.target.value })} />\n          <TextField label={`Total population`} type=\"number\" value={this.state.population} onChange={e => this.setState({ population: e.target.value })} />\n          <TextField label={`Daily distinct contacts`} type=\"number\" value={this.state.dailyContacts} onChange={e => this.setState({ dailyContacts: e.target.value })} />\n          <TextField label={`Transmission probability (%)`} type=\"number\" value={this.state.transmissionProbability} onChange={e => this.setState({ transmissionProbability: e.target.value })} />\n          <TextField label={`Illness duration (days)`} type=\"number\" value={this.state.illnessDuration} onChange={e => this.setState({ illnessDuration: e.target.value })} />\n          <TextField label={`Average mortality rate (%)`} type=\"number\" value={this.state.averageMortalityRate} onChange={e => this.setState({ averageMortalityRate: e.target.value })} />\n          <TextField label={`Available hospital beds`} type=\"number\" value={this.state.totalAvailableBeds} onChange={e => this.setState({ totalAvailableBeds: e.target.value })} />\n          <TextField label={`Avg mortality rate incr (%)`} type=\"number\" value={this.state.increasingMortalityRate} onChange={e => this.setState({ increasingMortalityRate: e.target.value })} />\n\n        </div>\n\n        <div className=\"Data\">\n          <h5>Total deceased: {this.formatHumanReadableNumber(data.total_deceased[data.total_deceased.length - 1])} (incl. {this.formatHumanReadableNumber(data.total_incr_deceased[data.total_incr_deceased.length - 1])})</h5>\n        </div>\n\n        <div className=\"Graphs\">\n\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <AreaChart data={chartData1}\n              margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n              <defs>\n                <linearGradient id=\"colorHealthy\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"colorIll\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\n                </linearGradient>\n                <linearGradient id=\"colorDead\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#ff5e5e\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#ff5e5e\" stopOpacity={0}/>\n                </linearGradient>\n              </defs>\n              <XAxis dataKey=\"days\" />\n              <YAxis />\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <Tooltip />\n              <Legend />\n              <Area type=\"monotone\" dataKey=\"total_healthy\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorHealthy)\" />\n              <Area type=\"monotone\" dataKey=\"total_ill\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorIll)\" />\n              <Area type=\"monotone\" dataKey=\"total_deceased\" stroke=\"#ff5e5e\" fillOpacity={1} fill=\"url(#colorDead)\" />\n            </AreaChart>\n          </ResponsiveContainer>\n\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <BarChart data={chartData2}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"days\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"daily_ill\" fill=\"#8884d8\" />\n              <Bar dataKey=\"daily_remitted\" fill=\"#82ca9d\" />\n              <Bar dataKey=\"daily_deceased\" fill=\"#ff5e5e\" />\n            </BarChart>\n          </ResponsiveContainer>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}